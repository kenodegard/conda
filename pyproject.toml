[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling >=1.12.2",
  "hatch-vcs >=0.2.0",
]

[project]
authors = [{name = "Anaconda, Inc.", email = "conda@continuum.io"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "archspec",
  "boltons >=23.0.0",
  "charset-normalizer",
  "conda-libmamba-solver >=23.11.0",
  "conda-package-handling >=2.2.0",
  "distro >=1.5.0",
  "jsonpatch >=1.32",
  "menuinst >=2",
  "packaging >=23.0",
  "platformdirs >=3.10.0",
  "pluggy >=1.0.0",
  "pycosat >=0.6.3",
  "requests >=2.28.0,<3",
  "ruamel.yaml >=0.11.14,<0.19",
  "setuptools >=60.0.0",
  "tqdm >=4",
  "truststore >=0.8.0; python_version>='3.10'",
  "zstandard >=0.15",
]
description = "OS-agnostic, system-level binary package manager."
dynamic = ["version"]
license = {file = "LICENSE"}
name = "conda"
readme = "README.md"
requires-python = ">=3.8"

[project.urls]
changelog = "https://github.com/conda/conda/blob/main/CHANGELOG.md"
documentation = "https://docs.conda.io/projects/conda/en/stable/"
repository = "https://github.com/conda/conda"

[project.scripts]
conda = "conda.cli.main_pip:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "dirty-tag"

[tool.hatch.build]
include = ["conda", "conda_env"]

[tool.hatch.build.hooks.vcs]
version-file = "conda/__version__.py"

[tool.coverage.run]
# store relative paths in coverage information
relative_files = true

[tool.coverage.report]
show_missing = true
sort = "Miss"
skip_covered = true
omit = [
  "*/site-packages/*",
  '*\site-packages\*',
  "conda/_vendor/*",
  "conda/console.py",
  "conda/cli/activate.py",
  "conda/cli/main_package.py",
  "conda/exports.py",
  "conda/gateways/connection/adapters/ftp.py",
  "conda/gateways/connection/adapters/s3.py",
  "conda_env/*",
  "tests/*",
  "utils/*",
]
exclude_lines = [
  "pragma: no cover",
  "pragma: py$PYTHON_MAJOR_VERSION no cover",
  "pragma: $TEST_PLATFORM no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "def __repr__",
  '\s*\.\.\.$',
  "if TYPE_CHECKING:",  # ignoring type checking imports
]

[tool.ruff]
exclude = ["conda/_vendor", "conda/auxlib", "tests/data/conda_format_repo", "tests/data/env_metadata", "tools/vendoring"]
target-version = "py38"

[tool.ruff.lint]
# E, W = pycodestyle errors and warnings
# F = pyflakes
# I = isort
# D = pydocstyle
# UP = pyupgrade
# ISC = flake8-implicit-str-concat
# TCH = flake8-type-checking
# T10 = flake8-debugger
# FA = flake8-future-annotations
# see also https://docs.astral.sh/ruff/rules/
select = ["E", "W", "F", "I", "D1", "UP", "ISC", "TCH", "T10", "FA"]
# E402 module level import not at top of file
# E501 line too long
# E722 do not use bare 'except'
# E731 do not assign a lambda expression, use a def
# D101 Missing docstring in public class
# D102 Missing docstring in public method
# D103 Missing docstring in public function
# D104 Missing docstring in public package
# D105 Missing docstring in magic method
# D107 Missing docstring in `__init__`
ignore = ["E402", "E501", "E722", "E731", "D101", "D102", "D103", "D104", "D105", "D107"]
extend-per-file-ignores = {"docs/*" = ["D1"], "tests/*" = ["D1"]}
pydocstyle = {convention = "pep257"}
flake8-type-checking = {exempt-modules = [], strict = true}

[tool.pytest.ini_options]
minversion = 3.0
testpaths = ["tests"]
norecursedirs = [
  "tests/data/*",
  "tests/integration/*",
  "tests/plugins/data/*",
  "docs",
  ".git",
]
addopts = [
  "--color=yes",
  # "--cov=conda",   # passed in test runner scripts instead (avoid debugger)
  "--cov-append",
  "--cov-branch",
  "--cov-report=term",  # print summary table to screen
  "--cov-report=xml",  # for codecov/codecov-action upload
  "--durations=16",
  "--junitxml=test-report.xml",
  "--splitting-algorithm=least_duration",
  "--store-durations",
  "--strict-markers",
  "--tb=native",
  "--xdoctest-modules",
  "--xdoctest-style=google",
  "-vv",
]
doctest_optionflags = [
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
  "ALLOW_UNICODE",
  "ELLIPSIS",
]
markers = [
  "integration: integration tests that usually require an internet connect",
  "slow: slow running tests",
  "benchmark: benchmark tests",
]
pythonpath = [
  # faking a test-plugin to test ImportError handling
  "tests/plugins/data/test-plugin",
]

[tool.vendoring]
destination = "conda/_vendor/"
namespace = "conda._vendor"
requirements = "conda/_vendor/vendor.txt"

patches-dir = "tools/vendoring/patches"
protected-files = ["__init__.py", "vendor.txt", "README.md"]

[tool.vendoring.transformations]
drop = [
  # contains unnecessary scripts
  "bin/",
  # remove unwanted modules
  '^boltons/(cache|debug|depr|dict|easter|eco|exc|file|format|func|gc|io|iter|json|list|math|mbox|named|path|queue|socket|stats|str|table|tb||type|url)utils\.py',
  "boltons/txurl_notes.md",
  "cpuinfo/__main__.py",
]
substitute = []

[tool.vendoring.typing-stubs]
# prevent stubs from being generated
appdirs = []
boltons = []
cpuinfo = []
distro = []
frozendict = []

[tool.vendoring.license.fallback-urls]
appdirs = "https://raw.githubusercontent.com/ActiveState/appdirs/master/LICENSE.txt" # MIT
boltons = "https://raw.githubusercontent.com/mahmoud/boltons/master/LICENSE" # BSD
cpuinfo = "https://raw.githubusercontent.com/workhorsy/py-cpuinfo/master/LICENSE" # MIT
distro = "https://raw.githubusercontent.com/python-distro/distro/master/LICENSE" # Apache
frozendict = "https://raw.githubusercontent.com/Marco-Sulla/python-frozendict/master/LICENSE.txt" # LGPL
